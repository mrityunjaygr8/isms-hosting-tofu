#cloud-config
bootcmd:
  - |
    timeout 60s sh -c 'while [ ! -e /dev/disk/azure/scsi1/lun10 ]; do sleep 1; done'
mounts:
  - [
      "/dev/disk/azure/scsi1/lun10-part1",
      "/opt",
      "ext4",
      "defaults,rw,user,exec,nofail",
      "0",
      "2",
    ]

final_message: "Cloud-init completed"
packages:
  - vim
  - restic
  - gdisk
  - ntfs-3g
  - rsync
package_upgrade: true

write_files:
  # Optionally create per-once scripts (only run once even if the instance reboots)
  - path: /var/lib/cloud/scripts/per-once/setup-once.sh
    permissions: "0755"
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -eux
      DISK="/dev/disk/azure/scsi1/lun10"
      PARTITION="${DISK}-part1"
      MOUNTPOINT="/opt"

      if [ ! -b "$PARTITION" ]; then
        echo "Creating partition table and primary partition"
        # Create partition table and primary partition using parted
        parted -s "$DISK" mklabel gpt
        parted -s "$DISK" mkpart primary ext4 0% 100%
        
        # Wait for the partition to be recognized
        sleep 1

        echo "Formatting the partition as ext4"
        # Format the partition as ext4
        mkfs.ext4 "$PARTITION"
      fi

      echo "Mounting the partition"
      # Mount the partition
      mount -a


      apt-get update
      # Install prerequisites
      apt-get install -y ca-certificates curl gnupg

      # Add Docker's official GPG key
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      chmod a+r /etc/apt/keyrings/docker.gpg

      # Set up the Docker repository
      echo \
      "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
      tee /etc/apt/sources.list.d/docker.list > /dev/null

      # Update the package database
      apt-get update

      # Install Docker Engine
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      # Add the current user to the Docker group
      usermod -aG docker azureuser

      # Verify installation
      docker --version
      docker compose version
